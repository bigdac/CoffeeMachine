package com.xr.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import vendingmachine.xr.com.coffeemachine.pojo.goods;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOODS".
*/
public class goodsDao extends AbstractDao<goods, Long> {

    public static final String TABLENAME = "GOODS";

    /**
     * Properties of entity goods.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GoodsId = new Property(0, long.class, "goodsId", true, "_id");
        public final static Property Price = new Property(1, float.class, "price", false, "PRICE");
        public final static Property Number = new Property(2, int.class, "number", false, "NUMBER");
        public final static Property Formulation = new Property(3, String.class, "formulation", false, "FORMULATION");
        public final static Property Efficiency = new Property(4, String.class, "efficiency", false, "EFFICIENCY");
        public final static Property ListPic = new Property(5, String.class, "listPic", false, "LIST_PIC");
        public final static Property DetailPic = new Property(6, String.class, "detailPic", false, "DETAIL_PIC");
        public final static Property GoodsName = new Property(7, String.class, "goodsName", false, "GOODS_NAME");
        public final static Property Position = new Property(8, int.class, "position", false, "POSITION");
        public final static Property Val = new Property(9, int.class, "val", false, "VAL");
    }


    public goodsDao(DaoConfig config) {
        super(config);
    }
    
    public goodsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOODS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: goodsId
                "\"PRICE\" REAL NOT NULL ," + // 1: price
                "\"NUMBER\" INTEGER NOT NULL ," + // 2: number
                "\"FORMULATION\" TEXT," + // 3: formulation
                "\"EFFICIENCY\" TEXT," + // 4: efficiency
                "\"LIST_PIC\" TEXT," + // 5: listPic
                "\"DETAIL_PIC\" TEXT," + // 6: detailPic
                "\"GOODS_NAME\" TEXT," + // 7: goodsName
                "\"POSITION\" INTEGER NOT NULL ," + // 8: position
                "\"VAL\" INTEGER NOT NULL );"); // 9: val
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOODS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, goods entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getGoodsId());
        stmt.bindDouble(2, entity.getPrice());
        stmt.bindLong(3, entity.getNumber());
 
        String formulation = entity.getFormulation();
        if (formulation != null) {
            stmt.bindString(4, formulation);
        }
 
        String efficiency = entity.getEfficiency();
        if (efficiency != null) {
            stmt.bindString(5, efficiency);
        }
 
        String listPic = entity.getListPic();
        if (listPic != null) {
            stmt.bindString(6, listPic);
        }
 
        String detailPic = entity.getDetailPic();
        if (detailPic != null) {
            stmt.bindString(7, detailPic);
        }
 
        String goodsName = entity.getGoodsName();
        if (goodsName != null) {
            stmt.bindString(8, goodsName);
        }
        stmt.bindLong(9, entity.getPosition());
        stmt.bindLong(10, entity.getVal());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, goods entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getGoodsId());
        stmt.bindDouble(2, entity.getPrice());
        stmt.bindLong(3, entity.getNumber());
 
        String formulation = entity.getFormulation();
        if (formulation != null) {
            stmt.bindString(4, formulation);
        }
 
        String efficiency = entity.getEfficiency();
        if (efficiency != null) {
            stmt.bindString(5, efficiency);
        }
 
        String listPic = entity.getListPic();
        if (listPic != null) {
            stmt.bindString(6, listPic);
        }
 
        String detailPic = entity.getDetailPic();
        if (detailPic != null) {
            stmt.bindString(7, detailPic);
        }
 
        String goodsName = entity.getGoodsName();
        if (goodsName != null) {
            stmt.bindString(8, goodsName);
        }
        stmt.bindLong(9, entity.getPosition());
        stmt.bindLong(10, entity.getVal());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public goods readEntity(Cursor cursor, int offset) {
        goods entity = new goods( //
            cursor.getLong(offset + 0), // goodsId
            cursor.getFloat(offset + 1), // price
            cursor.getInt(offset + 2), // number
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // formulation
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // efficiency
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // listPic
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // detailPic
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // goodsName
            cursor.getInt(offset + 8), // position
            cursor.getInt(offset + 9) // val
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, goods entity, int offset) {
        entity.setGoodsId(cursor.getLong(offset + 0));
        entity.setPrice(cursor.getFloat(offset + 1));
        entity.setNumber(cursor.getInt(offset + 2));
        entity.setFormulation(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEfficiency(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setListPic(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDetailPic(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setGoodsName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPosition(cursor.getInt(offset + 8));
        entity.setVal(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(goods entity, long rowId) {
        entity.setGoodsId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(goods entity) {
        if(entity != null) {
            return entity.getGoodsId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(goods entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
